==4260== Memcheck, a memory error detector
==4260== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4260== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4260== Command: ./main.out
==4260== Parent PID: 2014
==4260== 
==4260== Use of uninitialised value of size 8
==4260==    at 0x40714E: std::vector<Attribute, std::allocator<Attribute> >::size() const (stl_vector.h:655)
==4260==    by 0x4066A0: Schema::Schema(Schema const&) (Schema.cc:49)
==4260==    by 0x4275D8: QueryCompiler::JoinTree(OptimizationTree*, AndList*) (QueryCompiler.cc:95)
==4260==    by 0x42753A: QueryCompiler::JoinTree(OptimizationTree*, AndList*) (QueryCompiler.cc:80)
==4260==    by 0x427BE9: QueryCompiler::Compile(TableList*, NameList*, FuncOperator*, AndList*, NameList*, int&, QueryExecutionTree&) (QueryCompiler.cc:154)
==4260==    by 0x4030EB: main (main.cc:66)
==4260== 
==4260== Invalid read of size 8
==4260==    at 0x40714E: std::vector<Attribute, std::allocator<Attribute> >::size() const (stl_vector.h:655)
==4260==    by 0x4066A0: Schema::Schema(Schema const&) (Schema.cc:49)
==4260==    by 0x4275D8: QueryCompiler::JoinTree(OptimizationTree*, AndList*) (QueryCompiler.cc:95)
==4260==    by 0x42753A: QueryCompiler::JoinTree(OptimizationTree*, AndList*) (QueryCompiler.cc:80)
==4260==    by 0x427BE9: QueryCompiler::Compile(TableList*, NameList*, FuncOperator*, AndList*, NameList*, int&, QueryExecutionTree&) (QueryCompiler.cc:154)
==4260==    by 0x4030EB: main (main.cc:66)
==4260==  Address 0x100000022 is not stack'd, malloc'd or (recently) free'd
==4260== 
==4260== 
==4260== Process terminating with default action of signal 11 (SIGSEGV)
==4260==  Access not within mapped region at address 0x100000022
==4260==    at 0x40714E: std::vector<Attribute, std::allocator<Attribute> >::size() const (stl_vector.h:655)
==4260==    by 0x4066A0: Schema::Schema(Schema const&) (Schema.cc:49)
==4260==    by 0x4275D8: QueryCompiler::JoinTree(OptimizationTree*, AndList*) (QueryCompiler.cc:95)
==4260==    by 0x42753A: QueryCompiler::JoinTree(OptimizationTree*, AndList*) (QueryCompiler.cc:80)
==4260==    by 0x427BE9: QueryCompiler::Compile(TableList*, NameList*, FuncOperator*, AndList*, NameList*, int&, QueryExecutionTree&) (QueryCompiler.cc:154)
==4260==    by 0x4030EB: main (main.cc:66)
==4260==  If you believe this happened as a result of a stack
==4260==  overflow in your program's main thread (unlikely but
==4260==  possible), you can try to increase the size of the
==4260==  main thread stack using the --main-stacksize= flag.
==4260==  The main thread stack size used in this run was 8388608.
==4260== 
==4260== HEAP SUMMARY:
==4260==     in use at exit: 564,264 bytes in 365 blocks
==4260==   total heap usage: 1,163 allocs, 798 frees, 702,137 bytes allocated
==4260== 
==4260== 58 bytes in 2 blocks are definitely lost in loss record 56 of 161
==4260==    at 0x4C2E80F: operator new[](unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==4260==    by 0x42794E: QueryCompiler::Compile(TableList*, NameList*, FuncOperator*, AndList*, NameList*, int&, QueryExecutionTree&) (QueryCompiler.cc:130)
==4260==    by 0x4030EB: main (main.cc:66)
==4260== 
==4260== 1,692 (792 direct, 900 indirect) bytes in 1 blocks are definitely lost in loss record 150 of 161
==4260==    at 0x4C2E0EF: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==4260==    by 0x427A9D: QueryCompiler::Compile(TableList*, NameList*, FuncOperator*, AndList*, NameList*, int&, QueryExecutionTree&) (QueryCompiler.cc:139)
==4260==    by 0x4030EB: main (main.cc:66)
==4260== 
==4260== LEAK SUMMARY:
==4260==    definitely lost: 850 bytes in 3 blocks
==4260==    indirectly lost: 900 bytes in 3 blocks
==4260==      possibly lost: 0 bytes in 0 blocks
==4260==    still reachable: 562,514 bytes in 359 blocks
==4260==                       of which reachable via heuristic:
==4260==                         length64           : 459,184 bytes in 169 blocks
==4260==         suppressed: 0 bytes in 0 blocks
==4260== Reachable blocks (those to which a pointer was found) are not shown.
==4260== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==4260== 
==4260== For counts of detected and suppressed errors, rerun with: -v
==4260== Use --track-origins=yes to see where uninitialised values come from
==4260== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)
